"use strict";

require("core-js/modules/web.immediate.js");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));

var _searchView = _interopRequireDefault(require("./views/searchView.js"));

var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));

var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));

var _regeneratorRuntime = require("regenerator-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// for pollyfilling aync await only
// Hot module reloading (Parcel code)
// if (module.hot) {
//   module.hot.accept();
// }
const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;

    _recipeView.default.renderSpinner(); // 0. Updating resultsView to mark selected search results


    _resultsView.default.update(model.getSearchResultsPage()); // 1. Loading recipe
    // loadRecipe is an async fn, thus, it returns a promise which should be awaited
    // one async fn calls another async fn


    await model.loadRecipe(id); // 2. Rendering recipe

    _recipeView.default.render(model.state.recipe);
  } catch (err) {
    console.log(err);

    _recipeView.default.renderError();
  }
};

const controlSearchResults = async function () {
  try {
    // 1. Get search query
    const query = _searchView.default.getQuery();

    if (!query) return;
    console.log(query); // 2. Load the Spinner

    _resultsView.default.renderSpinner(); // 3. Load search results


    await model.loadSearchResults(query); // 4. Render INITIAL results

    console.log(model.state.search); // resultsView.render(model.state.search.results);

    _resultsView.default.render(model.getSearchResultsPage()); // 5. Render INITIAL pagination buttons


    _paginationView.default.render(model.state.search);
  } catch (err) {
    console.log(err);
  }
};

const controlPagination = function (goToPage) {
  console.log('Pag controller');
  console.log(goToPage); // 1. Render NEW results

  _resultsView.default.render(model.getSearchResultsPage(goToPage)); // 2. Render NEW pagination buttons


  console.log(model.state.search);

  _paginationView.default.render(model.state.search);
};

const controlServings = function (newServings) {
  // Update recipe servings (in state)
  model.updateServings(newServings); // Update view
  // recipeView.render(model.state.recipe);

  _recipeView.default.update(model.state.recipe);
};

const controlAddBookmark = function () {
  console.log('xxxx', model.state.recipe.bookmarked);
  if (model.state.recipe.bookmarked) model.deleteBookmark(model.state.recipe.id);
  console.log('xxxx', model.state.recipe.bookmarked);
  if (!model.state.recipe.bookmarked) model.addBookmark(model.state.recipe);
  console.log(model.state.recipe.bookmarked);

  _recipeView.default.update(model.state.recipe);
};

const init = function () {
  _recipeView.default.addHandlerRender(controlRecipes);

  _recipeView.default.addHandlerUpdateServings(controlServings);

  _recipeView.default.addHandlerAddBookmark(controlAddBookmark);

  _searchView.default.addHandlerSearch(controlSearchResults);

  _paginationView.default.addHandlerClick(controlPagination);
};

init();