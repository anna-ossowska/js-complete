"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getJSON = void 0;

var _regeneratorRuntime = require("regenerator-runtime");

var _config = require("./config.js");

// Promise will reject after certain amount of time
const timeout = function (s) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error(`Request took too long! Timeout after ${s} second`));
    }, s * 1000);
  });
};

const getJSON = async function (url) {
  try {
    // Hanling request which take too long
    // the fastest rejected/fulfilled Promise wins
    const res = await Promise.race([fetch(url), timeout(_config.TIMEOUT_SEC)]);
    const data = await res.json();
    if (!res.ok) throw new Error(`${data.message} (${res.status})`);
    return data;
  } catch (err) {
    // promise returned from this fn is now being rejected if there is an error
    // propagating error down from async fn in helper.js --> to async fn in model.js
    // console.log(`Helper ${err}`);
    throw err;
  }
};

exports.getJSON = getJSON;